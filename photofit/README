Fits parametrized light profiles to multi-band data in a Bayesian framework.
Forked from SPASMOID (Surface Photometry and Structural Modeling of Imaging Data), written by Matthew W. Auger and described in Bennert et al. 2011, ApJ, 726, 59.

-----------------------------------------------------------------------------------

Requirements

numpy, scipy, pyfits, pymc

-----------------------------------------------------------------------------------

Basic idea

Fits combinations of Sersic profiles to photometry data in multiple bands simultaneously.
Each component is described by a set of structural parameters (re, n, pa, q) as well as a centroid (x, y). The code allows for different values of the centroid in each band.
The structural parameters instead apply to all bands, which implies that each Sersic component will have a well defined color (pre-psf). 
In order to accurately fit galaxies with color gradients, multiple components are needed.

Photofit can either do a maximum-likelihood fit or a full MCMC exploration of the posterior probability distribution of the model.

-----------------------------------------------------------------------------------

Usage

Photofit runs with the following command

> python run_photofit.py configfile

where 'configfile' is a configuration file that contains all the information about the data and the model to be fitted.


-----------------------------------------------------------------------------------

The config file

The config file has two parts: the first part (between the first lines starting with '#' and the line that says '# MODELS') contains information regarding the data, the second part descries the model.
See examples 
example/two_sersic_mcmc
example/two_sersic_basinhop
The first part of should be mostly self-explanatory.
fit_type: can either be 'MCMC' or 'basinhop'
'MCMC' runs an MCMC chain of length specified by the parameter Nsteps.
'basinhop' does a maximum-likelihood search with the basinhopping method 
(see scipy.optimize.basinhopping), doing Nsteps iterations (hops).
MCMC seems to perform better.

#MODELS

The user must define one or more components. 
Each component must start with a 'model_class:' line (only allowed value is 'Sersic', for now).
Following, the user must specify, for each parameter, its starting value, lower and upper bounds, a step size (ignored if not MCMC), and an integer indicating whether that parameter is to be kept fixed (0) or to be fitted (1).
Optionally, the user can enter a sixth column indicating whether they want to link the parameter to a different parameter (a possible use is, when fitting two components, to impose that the components have the same centroid).


-----------------------------------------------------------------------------------

Quick start:

Add the YattaLens directory to your PYTHONPATH.

go to the directory example/
example> python ../run_photofit.py two_sersic_basinhop
will fit a double Sersic profile to the light profile of a strong lens, as observed from CFHT.

The code will produce a .output file with the maximum-likelihood parameters values.
It will also produce one .fits file for each band.
These files have multiple extension: ext 0 is the data, ext 1 is the model, ext 2 is the residual, ext 3 is the residual normalized by the uncertainty, ext 4 is the mask.

Running the other example,
example> python ../run_photofit.py two_sersic_mcmc
will instead run an MCMC chain.
In addition to the files produced in the bainshopping case, it will save the chain
into a .mcmc file.
To actually read that chain, you need to open it within python.
The following lines of code

>>> import pickle
>>> f = open('two_sersic_mcmc.mcmc', 'r')
>>> chain = pickle.load(f)
>>> f.close()
>>> for par in chain:
>>>	mean = chain['par'].mean()
>>>	std = chain['par'].std()
>>>	print par, mean, std

will read the chain and print mean and standard deviation of the posterior sample for each parameter.


-----------------------------------------------------------------------------------

Known issues:

