from spasmoid import imageFit as modelSB, models, convolve
import os,sys,numpy,pymc,pyfits
from math import pi
from scipy import ndimage
import warnings

lensname = 'SL2SJ021411-040502'

maskname = lensname+'_mask.fits'

niter = 10000 #number of steps in the optimization chain

#
#
#
zeropoints = {'u':30.,'g':30.,'r':30.,'i':30.,'z':30.}
exptimes = {'u':1.,'g':1.,'r':1.,'i':1.,'z':1.} #exptime doesn't actually matter

filters = ['u','g','r','i','z']
nfilt = len(filters)


#
#  Start defining the model
#

xbound = 1. #allowed departure of centroid from initial guess

pars = []
cov = []
i=0

guess = {'x': 20., 'y': 20., 'q': 0.8, 'PA': 0., 're': 10.}


for band in filters:
    pars.append(pymc.Uniform('x_%s'%band,guess['x']-xbound,guess['y']+xbound,value=guess['x']))
    pars.append(pymc.Uniform('y_%s'%band,guess['y']-xbound,guess['y']+xbound,value=guess['y']))
    cov.append(0.1)
    cov.append(0.1)
    i=i+1

pa = pymc.Uniform('PA',-90.,180.,value=guess['PA'])
q = pymc.Uniform('q',0.2,1.,value=min(0.8,guess['q']))
re = pymc.Uniform('re',0.,50.,value=guess['re'])
pars = pars + [pa,q,re]
cov = cov+[1.,0.05,0.5]


#
#  Package the input for fitting
#
data = {'MODELS':{},'IMG':{},'SIGMA':{},'ZP':zeropoints,'FILTERS':filters}
data['PRIORS'] = None

gain = {}
back = {}
n = len(pars)
i = 0
for band in filters:
    hdu = pyfits.open(lensname+'_%s_sci.fits'%band)[0]
    img = hdu.data.copy()
    subimg = img.copy()
    data['IMG'][band] = subimg
    subsigma = pyfits.open(lensname+'_%s_rms.fits'%band)[0].data.copy()

    data['SIGMA'][band] = subsigma

    psf = pyfits.open(lensname+'_%s_psf.fits'%band)[0].data.copy()
    m = (psf[:2].mean()+psf[-2:].mean()+psf[:,:2].mean()+psf[:,-2:].mean())/4.
    psf -= m
    psf /= psf.sum()

    var = {'x':2*i,'y':2*i+1,'pa':n-3,'q':n-2,'re':n-1}
    const = {'amp':1.,'n':4.}
    model = models.Sersic('bulge_%s'%(filters[i]),var,const)
    model.convolve = convolve.convolve(subimg,psf)[1]
    data['MODELS'][band] = [model]
    i += 1

if os.path.isfile(maskname):
    mask = pyfits.open(maskname)[0].data.copy()
    mask[mask>0] = 1 #this step is necessary if using segmentation maps generated by sextractor
else:
    warnings.warn("Warning: mask file not found")
    mask = numpy.zeros(subimg.shape)


data['MASK'] = mask.copy()

data['PARAMS'] = pars
data['COV'] = numpy.asarray(cov)
data['OVRS'] = 1
vals = modelSB.optimize(data,niter)
logp,trace,dets = vals[1]
print logp[0],logp[-1]


output = []
j=0
for par in pars:
    val = trace[-1][j]
    j = j+1
    print par,val
    output.append(str(par)+' %5.3f\n'%val)

for f in filters:
    mag = dets['bulge_%s'%f][-1]
    print f,mag
    output.append(f+' %4.2f\n'%mag)

f = open('deVauc_fit.txt','w')
f.writelines(output)
f.close()


for filt in filters:
    i = data['IMG'][filt]
    s = data['SIGMA'][filt]
    m = numpy.array(vals[0][filt])

    m = m.sum(0)
    hdu = pyfits.PrimaryHDU(i-m)
    nres= pyfits.ImageHDU((i-m)/s.reshape(i.shape))
    sigh= pyfits.ImageHDU(m.reshape(i.shape))
    hdulist = pyfits.HDUList([hdu,nres,sigh])
    hdulist.writeto(lensname+'_deV_%s_resid.fits'%filt,clobber=True)

